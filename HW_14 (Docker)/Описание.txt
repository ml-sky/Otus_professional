Описание задания

1.Установите Docker на хост машину

- Устаналиваем пререквизиты yum install -y yum-utils
- Добавляем репозиторий yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo
- Устанавливаем docker и docker-compose-plugin sudo yum install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin
- Устанавливаем в автозагрузку и стартуем docker systemctl enable docker; systemctl start docker
[root@otuslinux ~]# docker --version
Docker version 26.1.0, build 9714adc

2.Установите Docker Compose - как плагин, или как отдельное приложение
- Сначала скачиваем последний релиз из репозитория и помещаем его в /usr/local/bin/docker-compose
sudo curl -L "https://github.com/docker/compose/releases/download/v2.27.0/docker-compose-linux-x86_64" -o /usr/local/bin/docker-compose

Делаем файл исполняемым и симссылку
sudo chmod +x /usr/local/bin/docker-compose
sudo ln -s /usr/local/bin/docker-compose /usr/bin/docker-compose
[root@otuslinux ~]# docker-compose --version
Docker Compose version v2.27.0


3.Создайте свой кастомный образ nginx на базе alpine. После запуска nginx должен отдавать кастомную страницу (достаточно изменить дефолтную страницу nginx)

Собираем простой образ из Dockerfile (приложен)

[root@otuslinux test_nginx]# docker build -t ml_sky/myimages:nginx .
[+] Building 17.2s (8/8) FINISHED                                                                                                                                                                                                                               docker:default
 => [internal] load build definition from Dockerfile                                                                                                                                                                                                                      0.2s
 => => transferring dockerfile: 989B                                                                                                                                                                                                                                      0.1s
 => [internal] load metadata for docker.io/library/alpine:3.9                                                                                                                                                                                                             2.9s
 => [internal] load .dockerignore                                                                                                                                                                                                                                         0.2s
 => => transferring context: 2B                                                                                                                                                                                                                                           0.1s
 => [1/3] FROM docker.io/library/alpine:3.9@sha256:414e0518bb9228d35e4cd5165567fb91d26c6a214e9c95899e1e056fcd349011                                                                                                                                                       1.7s
 => => resolve docker.io/library/alpine:3.9@sha256:414e0518bb9228d35e4cd5165567fb91d26c6a214e9c95899e1e056fcd349011                                                                                                                                                       0.4s
 => => sha256:414e0518bb9228d35e4cd5165567fb91d26c6a214e9c95899e1e056fcd349011 1.64kB / 1.64kB                                                                                                                                                                            0.0s
 => => sha256:65b3a80ebe7471beecbc090c5b2cdd0aafeaefa0715f8f12e40dc918a3a70e32 528B / 528B                                                                                                                                                                                0.0s
 => => sha256:78a2ce922f8665f5a227dc5cd9fda87221acba8a7a952b9665f99bc771a29963 1.51kB / 1.51kB                                                                                                                                                                            0.0s
 => => sha256:31603596830fc7e56753139f9c2c6bd3759e48a850659506ebfb885d1cf3aef5 2.77MB / 2.77MB                                                                                                                                                                            0.6s
 => => extracting sha256:31603596830fc7e56753139f9c2c6bd3759e48a850659506ebfb885d1cf3aef5                                                                                                                                                                                 0.1s
 => [internal] load build context                                                                                                                                                                                                                                         0.5s
 => => transferring context: 1.08kB                                                                                                                                                                                                                                       0.5s
 => [2/3] RUN set -x     && addgroup -g 101 -S nginx     && adduser -S -D -H -u 101 -h /var/cache/nginx -s /sbin/nologin -G nginx -g nginx nginx     && apk update     && apk upgrade    && apk add nginx         mc         vim         bash         curl     && mkdir   9.4s
 => [3/3] COPY nginx.conf /etc/nginx/                                                                                                                                                                                                                                     0.4s
 => exporting to image                                                                                                                                                                                                                                                    1.3s
 => => exporting layers                                                                                                                                                                                                                                                   1.1s
 => => writing image sha256:bd219115c51ddb86753f6fe9d3e764c6d18e51f2407b18d8bf3fa50b3f4ce7e4                                                                                                                                                                              0.0s
 => => naming to docker.io/ml_sky/myimages:nginx                                                                                                                                                                                                                          0.0s

Смотрим образы и запускаем контейнер
[root@otuslinux test_nginx]# docker images
REPOSITORY        TAG       IMAGE ID       CREATED         SIZE
ml_sky/myimages   nginx     bd219115c51d   2 minutes ago   49.2MB
[root@otuslinux test_nginx]# docker run -d -p 8080:80 ml_sky/myimages:nginx
e8a0e1a19e0194680c2bba83e476e0cbe7ad4773cce394fe5dc341f9ecb6366a
[root@otuslinux test_nginx]# docker ps
CONTAINER ID   IMAGE                   COMMAND                  CREATED         STATUS         PORTS                                   NAMES
e8a0e1a19e01   ml_sky/myimages:nginx   "nginx -g 'daemon of…"   7 seconds ago   Up 4 seconds   0.0.0.0:8080->80/tcp, :::8080->80/tcp   friendly_haslett

Заходим на ip сервера и порт 8080 получаем Default Web Pages



Запустить контейнер из скаченного образа с Docker Hub (образ предварительно запушен на Docker Hub)
docker pull mlskyzero/myimages:nginx
docker run -d -p 8080:80 mlskyzero/myimages:nginx

Вывод:
[root@otuslinux ~]# docker pull mlskyzero/myimages:nginx
nginx: Pulling from mlskyzero/myimages
31603596830f: Pull complete
b00aa2ce8ab2: Pull complete
aca9afa3b61e: Pull complete
Digest: sha256:e8b3fbe6d55d999e6dc9247e7c8f889bf843c4bd33e699e34637422672c9c213
Status: Downloaded newer image for mlskyzero/myimages:nginx
docker.io/mlskyzero/myimages:nginx
[root@otuslinux ~]# docker images
REPOSITORY           TAG       IMAGE ID       CREATED          SIZE
mlskyzero/myimages   nginx     bd219115c51d   39 minutes ago   49.2MB
[root@otuslinux ~]# docker run -d -p 8080:80 mlskyzero/myimages:nginx
9b3677b88c0db9e8af82565cce6545182b76b4aa0e9d06c60a4fb2440030d40e
[root@otuslinux ~]# docker ps
CONTAINER ID   IMAGE                      COMMAND                  CREATED         STATUS         PORTS                                   NAMES
9b3677b88c0d   mlskyzero/myimages:nginx   "nginx -g 'daemon of…"   7 seconds ago   Up 4 seconds   0.0.0.0:8080->80/tcp, :::8080->80/tcp   modest_williams

4.Определите разницу между контейнером и образом

Контейнер в Docker по сути это сервис, контейнер создается из образов (image).
Изменения в контейнере можно коммитить, получив тем самым новый образ.

Образ в Docker
Контейнеры создаются из образов, образ используется в качестве шаблона для создания контейнеров. 
Можно запускать много контейнеров на базе одного docker образа.
Образы можно хранить в разных Docker Repository (Docker Hub например)
Также оттуда можно их грузить на хостовую систему. 



5.Ответьте на вопрос: Можно ли в контейнере собрать ядро?
Собрать можно (пример на Docker Hub https://hub.docker.com/r/tomzo/buildkernel), но думаю загрузиться с него не получится.